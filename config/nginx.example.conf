daemon off;
worker_processes 4;
pid nginx.pid;

### log everything to stderr
error_log stderr debug;

### uncomment the next line to log error messages to a file
# error_log logs/error.log error;

events {
  worker_connections 1024;
}

http {
  server_tokens off;

  resolver 8.8.8.8 ipv6=off;
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;

  lua_package_path "$prefix/resty_modules/lualib/?.lua;$prefix/resty_modules/lualib/?/init.lua;$prefix/?.lua;$prefix/?/init.lua;;";
  lua_package_cpath "$prefix/resty_modules/lualib/?.so;;";

  init_by_lua_block {
    require('resty.core')
    --- uncomment to enable lua-resty-http debug logging
    -- require('resty.http').debug(true)
    collectgarbage('collect')
  }

  server {
    ### set to >= 1024 while running as unprivileged user
    listen 80;

    ### access log is disabled; set file path to enable
    access_log off;

    ### set to 'off' in development mode
    lua_code_cache on;

    default_type text/html;

    error_page 400 403 404 405 413 500 502 @error;

    set $template_root templates;

    location = / {
      content_by_lua_block {
        require('app.views').main()
      }
    }

    location /static/ {
      alias ./static/;
      try_files $uri =404;
      include /usr/local/openresty/nginx/conf/mime.types;
    }

    location ~ ^/(?P<mode>dl|il|ln)/(?P<tiny_id>[a-zA-Z0-9]+)(?:\.[a-zA-Z0-9]+|/(?P<file_name>[^\\/]+))?/?$ {
      content_by_lua_block {
        require('app.views').getfile(ngx.var.tiny_id, ngx.var.mode, ngx.var.file_name)
      }
    }

    location ~ ^/webhook/(?P<secret>[a-zA-Z0-9:_-]+)/?$ {
      content_by_lua_block {
        require('app.views').webhook(ngx.var.secret)
      }
    }

    location ~ ^/upload(?:/(?P<type>text|file))?/?$ {
      # 20 MiB getFile API method limit + 10% (multipart/form-data overhead)
      client_max_body_size 22M;
      content_by_lua_block {
        require('app.views').upload(ngx.var.type)
      }
    }

    location / {
      return 404;
    }

    location @error {
      content_by_lua_block {
        require('app.views').error()
      }
    }

  }

}
